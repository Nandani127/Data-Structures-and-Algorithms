/* Prblm 1. Remove duplicate elements from sorted array
Given a sorted array A of size N, delete all the duplicates elements from A.
Time complexity -- O(N) , Space Complexity -- O(1) */

#include<iostream>
using namespace std;

int remove_duplicate(int a[], int n)
{
	if(n==0 || n==1)
	    return n;
	int j = 0;
	for(int i=0; i<n-1; i++)
	    if(a[i] != a[i+1])
	        a[j++] = a[i];
	a[j++] = a[n-1];
	return j;
}
int main()
{
	int a[10], n, i;
	int ans;
	cout << "Enter size of array : ";
	cin >> n;
	cout << "Enter array : ";
	for(i=0; i<n; i++)
	    cin >> a[i];
	ans = remove_duplicate(a, n);
	for(i=0; i<ans; i++)
	    cout << a[i] << " ";
	return 0;
}

/* Prblm 2. Reverse array in group
Given an array arr[] of positive integers of size N. Reverse every sub-array group of size K.
Time complexity -- O(n) , Space complexity -- O(1)  */

#include<iostream>
using namespace std;

void reverse(int arr[], int n, int k) 
{ 
    for (int i = 0; i < n; i += k) 
    { 
        int left = i; 
  
        // to handle case when k is not multiple of n 
        int right = min(i + k - 1, n - 1); 
  
        // reverse the sub-array [left, right] 
        while (left < right)
            swap(arr[left++], arr[right--]); 
  
    } 
} 
int main() 
{ 
    int arr[10]; 
    int k ,n; 
    cout << "Enter size of array :";
    cin >> n;
    cout << "Enter elements :";
    for(int i=0; i<n; i++)
        cin >> arr[i];
     cout << "Enter value of k :";
     cin >> k;
    reverse(arr, n, k); 
  
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " "; 
  
    return 0; 
} 

/* Prblm 3. Who has the majority
Given an array arr[] of size N and two elements x and y, use counter variables to find which element appears most in the array,
 x or y. If both elements have the same frequency, then return the smaller element.
Note:  We need to return the element, not its count.
Time complexity -- O(N) , Space complexity -- O(1) */

#include<iostream>
using namespace std;

int majority(int a[], int n, int x, int y)
{
	int i, countx = 0, county = 0;
	for(i=0; i<n; i++)
	{
		if(a[i] == x)
		    countx++;
		if(a[i] == y)
		    county++;
	}
	if(countx < county)
	    return y;
	else if(countx > county)
	    return x;
	else if(countx == county)
	    return (x<y ? x : y);
}
int main()
{
	int a[10], n, x, y;
	int i, ans;
	cout << "Enter size of array :";
	cin >> n;
	cout << "Enter elements ";
	for(i=0; i<n; i++)
	    cin >> a[i];
	cout <<"Enter x and y :";
	cin >> x >> y;
	ans = majority(a, n, x, y);
	cout << ans;
	return 0;
}

/* Prblm 4. Find Transition Point
Given a sorted array containing only 0s and 1s, find the transition point. 
Time complexity -- O(logn) , Space complexity -- O(1) */

#include<iostream>
using namespace std;

int transitionPoint(int arr[], int n) {
     int l , r , ans;
     l = 0;
     r = n-1;
     ans = -1;
	if(arr[0]==1)
	    return 0;
	while(l <= r)
     {
     	int mid = (l+r)/2;
     	if(arr[mid] == 1)
     	{
     		r = mid-1;
     		ans = mid;
		}
		else
		{
			l = mid+1;
		}
	}
	return ans;
}
int main()
{
	int a[10], n;
	cout << "Enter size of array :";
	cin >> n;
	cout << "Enter elements :";
	for(int i=0; i<n; i++)
	    cin >> a[i];
	int ans = transitionPoint(a, n);
	cout << ans;
	return 0;
}

/* Prblm 5. Leaders in an array
Given an array A of positive integers. Your task is to find the leaders in the array. An element of array is leader 
if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.
Time complexity -- O(N) , Space complexity -- O(N) */

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

vector<int> leaders(int a[], int n)
{
	vector<int> v;
	int i;
	int max;
	max = a[n-1];
	v.push_back(max);
	for(i=n-1; i>=0; i--)
	    if(a[i] > max)
	    {
	    	max = a[i];
	    	v.push_back(max);
	    }
	reverse(v.begin(), v.end());
	return v;
}
int main()
{
	int a[10], n, i;
	int v_n;
	vector<int> v;
	cout << "Enter size of array :";
	cin >> n;
	cout << "Enter elements :";
	for(i=0; i<n; i++)
	    cin >> a[i];
	v = leaders(a, n);
	v_n = v.size();
	for(i=0; i<v_n; i++)
	    cout << v[i] << " ";
	return 0;
}
